//给你一根长度为 n 绳子，请把绳子剪成 m 段（m、n 都是整数，2≤n≤58 并且 m≥2）。

//每段的绳子的长度记为k[0]、k[1]、……、k[m]。k[0]k[1] … k[m] 可能的最大乘积是多少？

//例如当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到最大的乘积18。
/*
假设有N=n1+n2+n3+...+n;
如果你想拆出的ni>5，则一定有3(ni-3)>ni，说明拆出3之后的乘积一定比之前只拆出ni大，所以要尽可能地拆3出来
如果拆出了ni=4，结果等同于拆成2*2
拆出1对乘积没有用，所以想要拆出来的乘积最大，元素只能有2，3
又因为2*2*2<3*3，所以最多只能有两个2
*/
class Solution {
public:
    int maxProductAfterCutting(int n) {
        if (n <= 3) return 1 * (n - 1);
        int res = 1;
        if (n % 3 == 1) res = 4, n -= 4;
        else if (n % 3 == 2) res = 2, n -= 2;
        
        while (n) res *= 3, n -= 3;
        return res;
    }
};
