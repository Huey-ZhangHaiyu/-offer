/*
在一个m×n的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于0）。
你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格直到到达棋盘的右下角。
给定一个棋盘及其上面的礼物，请计算你最多能拿到多少价值的礼物？
注意：m,n>0

样例：
输入：
[
  [2,3,1],
  [1,7,1],
  [4,6,1]
]
输出：19：沿着路径 2→3→7→6→1 可以得到拿到最大价值礼物。
*/

//动态规划问题一般会从1开始，因为从0开始，只要减1就会越界
/*
f[i][j]表示第i,j位置拿到的最大价值，就等于上下两个方向拿到的最大加上本身
就这么状态转换就好了
*/
class Solution {
public:
    int getMaxValue(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        vector<vector<int>> f(n+1,vector<int>(m+1));
        for(int i=1;i<n+1;i++){
            for(int j=1;j<m+1;j++){
                f[i][j]=max(f[i-1][j],f[i][j-1])+grid[i-1][j-1];//f从1开始判断的，所以grid要往前偏移一格
            }
        }
        return f[n][m];
    }
};
