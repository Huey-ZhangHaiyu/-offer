//求n的第k位数字: 
n >> k & 1;
//一般我更喜欢把1左移，避免n为负数的情况
n&1<<k;

/*返回n的最后一位1：lowbit(n)定义为非负整数n在二进制表示下“最低为的1及其后边所有的0”构成的数值。
例如n=10的二进制表示为（2）1010， 则lowbit(n)=2=(2)10。
因为补码就是取反加1，取反之后的原本最后一个1后面的0会变成1，恰好进位变成1，&之后也就剩下了这一个1；
lowbit(6)=(0110)&(1001+1)=(0110)&(1010)=0010=2
*/
lowbit(n) = n & -n;
//然后再利用这个循环取出1去数1的个数：
while(x)
    for(int i=0;i<n;i++) 
        x-=lowbit(x);
